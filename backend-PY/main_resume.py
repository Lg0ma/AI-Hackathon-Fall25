# main.py
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from resume_creator import generate_resume_from_speech
import json
import os

app = FastAPI(title="Universal Resume Creator API (Mistral via Ollama)")

DATA_FILE = "resumes.json"  # local file to store saved resumes


# --------------------------
# Model for /generate_resume
# --------------------------
class ResumeSpeechInput(BaseModel):
    phone: str
    responses: dict


@app.get("/")
async def root():
    return {"message": "Resume Creator API is running!"}


@app.post("/generate_resume")
async def generate_resume_endpoint(data: ResumeSpeechInput):
    """
    POST endpoint that accepts speech-to-text JSON input and returns
    a clean, structured resume generated by Mistral (via Ollama HTTP call).
    """
    try:
        result = generate_resume_from_speech(data.dict())
        if "error" in result:
            raise HTTPException(status_code=500, detail=result["error"])
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# ================================================================
# NEW: Save and Retrieve Resume Data
# ================================================================

@app.post("/save_resume")
async def save_resume(resume: dict):
    """
    Save a generated resume JSON to a local file (temporary storage).
    Keyed by phone number.
    """
    if "phone" not in resume:
        raise HTTPException(status_code=400, detail="Missing 'phone' field")

    # Load existing resumes if the file exists
    data = {}
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                data = {}

    # Save/update the entry
    phone = resume["phone"]
    data[phone] = resume

    # Write back to file
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

    return {"message": f"Resume saved for {phone}", "resume": resume}


@app.get("/resume/{phone}")
async def get_resume(phone: str):
    """
    Retrieve a saved resume by phone number.
    """
    if not os.path.exists(DATA_FILE):
        raise HTTPException(status_code=404, detail="No resumes found")

    with open(DATA_FILE, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
        except json.JSONDecodeError:
            raise HTTPException(status_code=500, detail="Corrupted data file")

    if phone not in data:
        raise HTTPException(status_code=404, detail=f"No resume found for {phone}")

    return data[phone]
